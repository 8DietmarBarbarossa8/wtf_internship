/*
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–≤—É—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ Dart 
—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ 
`dart:collection` –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è). –í —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω—ã 
–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –≤—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É
- —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
- –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
- –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞
- –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
- –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ List<E> (`dart:collection`)
    
–î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ 
`<T>`, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø.

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
- –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Deque –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
*/

import 'doubly_linked_list.dart';

main() {
  final DoublyLinkedList dLL = DoublyLinkedList(volume: 10);

  print('---------------');
  print('Size: ${dLL.size}');
  dLL.addLast(300);
  dLL.addLast('\$');
  dLL.addFirst('Herrington');
  dLL.addFirst('Billy');
  print(dLL.toList());
  print('Size: ${dLL.size}');
  print('Empty: ${dLL.isNotEmpty}');

  print('---------------');
  print("Insert 'Object()' to position 2");
  dLL.insert(2, Object());
  print(dLL.toList());
  print("Insert true to position 4");
  dLL.insert(4, true);
  print(dLL.toList());

  print('---------------');
  dLL.removeAt(2);
  print(dLL.toList());
  dLL.removeFirst();
  dLL.removeLast();
  print(dLL.toList());

  print('---------------');
  dLL.addFirst(25);
  dLL.addFirst(3.14);
  dLL.addFirst('message');
  dLL.addLast(100);
  dLL.addLast(false);
  dLL.addLast(null);
  dLL.addLast('(2+2)');
  print('Money: ${dLL.get(4)}\$');
  print('Size: ${dLL.size}');
  print(dLL.toList());

  print('---------------');
  try {
    dLL.push('');
  } catch (e) {
    print(e.toString());
  }

  print('---------------');
  dLL.update(dLL.size - 1, '4');
  dLL.update(3, '–•–∞—Ä–∏—Ç–æ–Ω–æ–≤');
  print(dLL.toList());

  print('---------------');
  print('First: ${dLL.peekFirst()}');
  print('Last: ${dLL.peekLast()}');

  print('---------------');
  dLL.clear();
  print('The list was cleaned!');
  dLL.addLast('beer');
  dLL.addLast('23');
  dLL.addLast(3);
  dLL.addLast(1);
  dLL.addLast(3);
  dLL.addLast(1);
  dLL.addLast(1);
  dLL.addLast(true);
  dLL.addLast('üò≤');

  print(dLL.toList());
  dLL.removeLastOccurrence(1);
  dLL.removeFirstOccurrence(3);
  print(dLL.toList());
  dLL.removeFirstOccurrence('üò≤');
  dLL.removeLastOccurrence('beer');
  print(dLL.toList());
  dLL.pop();
  print(dLL.toList());
  dLL.pollFirst();
  dLL.pollLast();
  print(dLL.toList());

  print('---------------');
  dLL.push('str');
  print(dLL.toList());
  print(dLL.peekFirst());
  print(dLL.peekLast());

  print('---------------');
  print(dLL.toList());
  print('Size: ${dLL.size}');

  print(dLL.pop());
  print(dLL.pop());
  print(dLL.pop());

  print(dLL.toList());
  print('Size: ${dLL.size}');

  print('---------------');
  dLL.addFirst('a');
  print('Size: ${dLL.size}');
  print(dLL.peekFirst());
  print('Size: ${dLL.size}');
  print(dLL.peekLast());
  print('Size: ${dLL.size}');
  print(dLL.pollFirst());
  print('Size: ${dLL.size}');
  print(dLL.pollLast());
  print('Size: ${dLL.size}');
  print('Empty: ${dLL.isNotEmpty}');
  print(dLL.pollFirst());
  print('Size: ${dLL.size}');

  print('---------------');
}
